generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[] @relation("StoreToCategory")
  //subcategories   Subcategory[] @relation("StoreToSubcategory")
  products        Product[]  @relation("StoreToProduct")
  sizes           Size[]     @relation("StoreToSize")
  colors          Color[]     @relation("StoreToColor")
  orders          Order[]     @relation("StoreToOrder")
  feedback        Feedback[]     @relation("StoreToFeedback")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

//model Subcategory{
 // id          String      @id @default(uuid())
  //storeId     String      // Foreign Key to Store
 /// store       Store       @relation("StoreToSubcategory", fields: [storeId], references: [id])
//  name        String
 // types       Subcategorytype[]
  //products      Product[]  @relation("SubcategoryToProduct")
 // createdAt   DateTime    @default(now())
 // updatedAt   DateTime    @updatedAt

 // @@index([storeId])
//}



//model Subcategorytype{
 // id            String      @id @default(uuid())
  //type          String
  //subcategoryId String
  //index  Int @default(0) 
  //subcategory   Subcategory   @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  ///values Subcategorytypevalue[]
  //createdAt   DateTime @default(now())
 /// updatedAt   DateTime @updatedAt

  //@@index([subcategoryId])
//}

//model Subcategorytypevalue{
//  id String @id @default(uuid())
//  value String
//  subcategorytypeId String
 // subcategorytype Subcategorytype @relation(fields:[subcategorytypeId], references: [id], onDelete: Cascade)
 // createdAt   DateTime @default(now())
 // updatedAt   DateTime @updatedAt

  //@@index([subcategorytypeId])
//}
 
model Product {
  id            String    @id @default(uuid())
  storeId       String    // Foreign Key to Store
  store         Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String    // Foreign Key to Category
  category      Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name          String
  mastertype String
  mode  String 
  childrentype          String
  thirdtype String
  values        Productvalue[]
  description String
  isFeatured    Boolean   @default(false)
  isArchived    Boolean   @default(false)
  sizeId        String    // Foreign Key to Size
  size          Size      @relation(fields: [sizeId], references: [id])
  orderItems    OrderItem[]   // Relation to Order model
  createdAt     DateTime  @default(now())  
  updatedAt     DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  //@@index([subcategoryId])
  @@index([sizeId])
  //@@index([productpageId]) 
}

model Productvalue{ 
  id          String      @id @default(uuid())
  typevaluemaster   String
  typevaluechildren   String
  productId   String
  index       Int  
  price Int
  typevaluethird String
  orderItems    OrderItem[]   // Relation to Order model
  images    Image[]
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  colorId       String    // Foreign Key to Color
  color         Color     @relation(fields: [colorId], references: [id])

  @@index([productId])
  @@index([colorId])
}

model Image {
  id          String   @id @default(uuid())
  productvalueId   String   // Foreign Key to Product
  productvalue   Productvalue  @relation(fields: [productvalueId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productvalueId])
}

model Order {
  id        String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isBooked     Boolean   @default(false)
  firstname String @default("")
  lastname  String @default("")
  studentId  String @default("")
  totalPrice Int 
  phone      String    @default("")
  personalemail  String @default("")
  studentemail  String @default("")
  //addressline1    String    @default("")
  //addressline2 String    @default("")
  //postal String    @default("")
  //city String    @default("")
  //country String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  confirmationid        Int @default(100000000)

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  quantity   Int
  productIndex Int 
  product   Product @relation(fields: [productId], references: [id])
  productvalueId String  // Foreign Key to Product
  productvalue   Productvalue @relation(fields: [productvalueId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([productvalueId])

}

model Feedback {
  id              String    @id @default(uuid())
  storeId         String    // Foreign Key to Store
  store           Store     @relation("StoreToFeedback", fields: [storeId], references: [id])
  firstname       String @default("")
  lastname        String @default("")
  studentId       String @default("")
  phone           String    @default("")
  email           String @default("")
  ordernumber     String @default("")
  feedbackIn      String @default("") @db.VarChar(1000)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  reviewed        Boolean @default(false)

  @@index([storeId])
}


model Size {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id          String   @id @default(uuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  productvalues Productvalue[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

